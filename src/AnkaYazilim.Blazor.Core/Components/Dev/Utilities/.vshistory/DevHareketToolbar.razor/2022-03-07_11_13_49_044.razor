@using Microsoft.Extensions.Localization

<DxToolbar ItemRenderStyleMode="ItemRenderStyleMode"
           ItemSizeMode="ItemSizeMode">

    <DxToolbarItem Click="NewButtonClick"
                   Enabled="NewButtonEnabled"
                   IconCssClass="newimage"
                   Text="@L["New"]"
                   Tooltip="@L["AddNewItem"]"
                   Visible="NewButtonVisible" />

    <DxToolbarItem IconCssClass="newimage"
                   Text="@L["New"]"
                   Tooltip="@L["ChooseTransactionType"]"
                   Visible="NewDropDownButtonVisible"
                   DropDownDisplayMode="DropDownDisplayMode.DropDown">
        <Items>
            <DxToolbarItem Click="NewDropDownButton1Click"
                           IconCssClass="@DropDownButton1IconCssClass"
                           Text="@DropDownButton1Text"/>
            
            <DxToolbarItem Click="NewDropDownButton2Click"
                           IconCssClass="@DropDownButton2IconCssClass"
                           Text="@DropDownButton2Text"/>
        </Items>

    </DxToolbarItem>

    <DxToolbarItem Click="UpdateButtonClick"
                   Enabled="UpdateButtonEnabled"
                   IconCssClass="editimage"
                   Text="@L["Update"]"
                   Tooltip="@L["UpdateSelectedItem"]"
                   Visible="UpdateButtonVisible" />

    <DxToolbarItem Click="DeleteButtonClick"
                   Enabled="DeleteButtonEnabled"
                   IconCssClass="deleteimage"
                   Text="@L["Delete"]"
                   Tooltip="@L["DeleteSelectedItem"]"
                   Visible="DeleteButtonVisible" />

</DxToolbar>



@code {

    [Parameter] public ToolbarRenderStyleMode ItemRenderStyleMode { get; set; } = ToolbarRenderStyleMode.Plain;
    [Parameter] public SizeMode ItemSizeMode { get; set; } = SizeMode.Small;

    [Parameter]
    public bool NewButtonEnabled { get; set; } = true;
    [Parameter] public bool UpdateButtonEnabled { get; set; }
    [Parameter] public bool DeleteButtonEnabled { get; set; }
    [Parameter] public bool ReserveButtonEnabled { get; set; }
    [Parameter] public bool PrintButtonEnabled { get; set; }
    [Parameter] public bool ReserveButtonBeginGroup { get; set; } = true;

    [Parameter, EditorRequired] public IStringLocalizer L { get; set; }

    [Parameter]
    public string ReserveButtonIconcssClass { get; set; } = "tableimage";
    [Parameter] public string ReserveButtonText { get; set; }
    [Parameter] public string ReserveButtonTooltip { get; set; }

    [Parameter] public bool NewButtonVisible { get; set; }
    [Parameter] public bool UpdateButtonVisible { get; set; }
    [Parameter] public bool DeleteButtonVisible { get; set; }
    [Parameter] public bool ReserveButtonVisible { get; set; }
    [Parameter] public bool GroupButtonVisible { get; set; }
    [Parameter] public bool FilterButtonVisible { get; set; }
    [Parameter] public bool PrintButtonVisible { get; set; }

    [Parameter] public EventCallback NewButtonClick { get; set; }
    [Parameter] public EventCallback UpdateButtonClick { get; set; }
    [Parameter] public EventCallback DeleteButtonClick { get; set; }
    [Parameter] public EventCallback ReserveButtonClick { get; set; }
    [Parameter] public EventCallback PrintButtonClick { get; set; }
    [Parameter, EditorRequired] public EventCallback<Task> GetListDataSource { get; set; }

    private void ShowHideGroupPanel()
    {
        DataGridService.ShowGroupPanel = !DataGridService.ShowGroupPanel;
        CommonService.HasChanged();
    }

    private void ShowHideFilterRow()
    {
        DataGridService.ShowFilterRow = !DataGridService.ShowFilterRow;
        CommonService.HasChanged();
    }

    private async Task CheckedChangedAsync(bool state)
    {
        ListPageService.IsActiveCards = state;
        DataGridService.SelectFirstDataRow = true;
        await GetListDataSource.InvokeAsync();
    }

}
